{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Content.svelte",
    "Image.svelte",
    "Paragraph.svelte",
    "Section.svelte",
    "Video.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Content from './Content.svelte'\n\timport { dndzone } from 'svelte-dnd-action';\n\timport Svg from './Svg.svelte'\n\tlet nodes={}\n\tlet opt={'depth':1,\n\t\t\t 'base':'root',\n\t\t\t url:'https://9231c9c3-121c-4b8e-bbfd-ac275ec62eb9-bluemix.cloudantnosqldb.appdomain.cloud/test/',\n\t\t\t 'edit':false,\n\t\t\t 'remove':false,\n\t\t\t 'addParagraph':false, \n\t\t\t 'addSection':false,\n\t\t\t 'addImage':false,\n\t\t\t 'showContextInfer':0,\n\t\t\t 'history':[], \n\t\t\t 'dragDisabled':true,\n\t\t\t 'user':\"apikey-81f76e82d4154627812593832eb9c4cb\",\n\t\t\t 'pwd':\"8918d591770b9449c2012979b0f9101b5416e1c6\"}\n\tlet key=false\n\t\n\tfunction _handleKeydown(event) {\n\t\tkey = event.which;\n\t}\n\n\tconst newNodes=\"957fd8f002d38bd256c615b4c84cd5fc\"\n\n\n\t\n\tasync function getID(id){\n\tif (!nodes[id]){\n\tawait fetch(opt.url+id)\n\t\t.then(res => res.json())\n\t\t.then(data => {\n\t\t\tnodes[id]= data;\n\t\tconsole.log(id)\n\t\t}).catch(function(error) {\n        console.log(error);\n    });\n\t}\n}\n\tlet start\n\tlet menuWidth=\"40px\"\n\tfunction startTimer(){\n\t\tstart=Date.now()\n\t}\n\tfunction check(){\n\t\tconst elapsed=Date.now()-start\n\t\tif (elapsed<350)\n\t\t\t{\tif (opt.history.length>0){\n\t\topt.base=opt.history[opt.history.length-1];\n\t\topt.history.pop()\n\t}}\n\t\telse\n\t\t\t{\n\t\t\t\tif (menuWidth==\"40px\")\n\t\t\t\t\t{menuWidth='100%'}\n\t\t\t\t\telse\n\t\t\t\t\t{menuWidth=\"40px\"}\n\t\t\t}\n\t}\n\n\tfunction toggle(v,n){\n\t\tif (n==2) {opt[v]=!opt[v]}\n\t\telse {if (opt[v]+1>=n) {opt[v]=0} else {opt[v]=opt[v]+1}}\n\t}\n\t\n\t//$: if(key==68) {opt.drag=!opt.drag} else if (key==69) {opt.edit=!opt.edit} // add authorization\n</script>\n<svelte:window on:keydown=\"{_handleKeydown}\" on:keyup=\"{() => key = false}\"/>\n\n<section>\n<Content bind:nodes={nodes} bind:opt={opt} id={opt.base} depth={1}/>\n</section>\n\n<div class=\"back\" style=\"width: {menuWidth}\" on:mousedown|self={()=>startTimer()} on:mouseup|self={()=>check()} on:touchstart|self={()=>startTimer()} on:touchend|self={()=>check()}>\n{#if menuWidth==\"100%\"}\n\t<span  class=\"control\" ><Svg name=\"Connection\" size=30 fill=\"black\"/></span>\n\t<span  class=\"control\" ><Svg name=\"Authorization\" size=30 fill=\"black\"/></span>\n\t<span  class=\"control\" ><Svg name=\"Delete\" size=30 fill=\"black\"/></span>\n\t<span  class=\"control\" ><Svg name=\"Cut\" size=30 fill=\"black\"/></span>\n\t<span  class=\"control\" on:click={()=>{opt.remove=!opt.remove}}><Svg name=\"Remove\" size=30 fill={(opt.remove)?\"crimson\":\"black\"}/></span>\n\t<span  class=\"control\" on:click={()=>{opt.addSection=!opt.addSection}} ><Svg name=\"Section\" size=30 fill={(opt.addSection)?\"olive\":\"black\"}/></span>\n\t<span  class=\"control\" ><Svg name=\"Code\" size=30 fill=\"black\"/></span>\n\t<span  class=\"control\" ><Svg name=\"Video\" size=30 fill=\"black\"/></span>\n\t<span  class=\"control\" on:click={()=>{opt.addImage=!opt.addImage}}><Svg name=\"Image\" size=30 fill={(opt.addImage)?\"olive\":\"crimson\"}/></span>\n\t<span  class=\"control\" on:click={()=>{opt.addParagraph=!opt.addParagraph}}><Svg name=\"Paragraph\" size=30 fill={(opt.addParagraph)?\"olive\":\"black\"}/></span>\n\t<span  class=\"control\" on:click={()=>{opt.edit=!opt.edit}}><Svg name=\"Editor\" size=30 fill={(opt.edit)?\"olive\":\"crimson\"}/></span>\n\t<span  class=\"control\" on:click={()=>{opt.dragDisabled=!opt.dragDisabled}}><Svg name=\"Move\" size=30 fill={(opt.dragDisabled)?\"crimson\":\"olive\"}/></span>\n\t<span  class=\"control\" ><Svg name=\"Equation\" size=30 fill=\"black\"/></span>\n\t<span  class=\"control\" on:click={()=>{toggle('showContextInfer',3)}}><Svg name=\"Connection\" size=30 fill={(opt.showContextInfer!=0)?\"olive\":\"black\"}/></span>\n{/if}\n</div>\n{#await getID(newNodes)}\n{:then go}\n{/await}\n\n\n<style>\n:global(body){\n\tmargin:0;\n\tpadding:0;\n\n\t}\n\n\n\t.back {\n\t\tbox-sizing: border-box;\n\t\tdisplay:flex;\n\t\tflex-direction: row-reverse;\n\t\tjustify-content: center;\n\t\talign-content: center;\n\t\theight: 40px;\n\t\tbackground-color: rgba(230,230,240,0.8);\n\t\tposition: fixed;\n  \t\tright: 0;\n  \t\tbottom: 0;\n\t\tborder-radius: 15px 0px 0px 0px;\n\t\tpadding-right:40px;\n\t\twhite-space: nowrap;\n\t}\n\t.control {\n\t\twidth:40px;\n\t\theight:40px;\n\t\tmargin:0px;\n\t\tpadding:40;\n\t\tdisplay: inline-block;\n\t\tpadding: 5px\n\t}\n\t\n\t.new {\n\t\twidth: 40px;\n\t\tmin-height: 40px;\n\t\tbackground-color: coral;\n\t\tposition: fixed;\n  \tleft: 0;\n  \tbottom: 0;\n\t\tborder-radius: 0px 10px 0px 0px;\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tflex-wrap:wrap;\n\t\tjustify-content: center\n\t}\n\t\n\t.item {\n\t\twidth:30px;\n\t\theight:30px;\n\t\tbackground-color: white;\n\t\tmargin: 5px;\n\t\tborder-radius: 10px;\n\t\tpadding-left: 5px;\n\t\tpadding-top: 3px\n\t}\n\tsection {\n\t\tmargin-left: auto;\n\t\tmargin-right:auto;\n\t\twidth: 100%;\n\t\tmax-width: 800px;\n\t\tborder: 0px solid black;\n\t\tpadding: 0;\n        /* this will allow the dragged element to scroll the list */\n\t\toverflow-y: auto ;\n\t\theight: auto;\n\t\tbackground-color: white; /* rgba(100, 100, 100, 0.05);*/ \n\t\tpadding-bottom: 40px \n\t}\n\t:global(body)::-webkit-scrollbar {\n    display: none;\n}\n\n/* Hide scrollbar for IE, Edge and Firefox */\n:global(body) {\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n</style>",
    "<script>\n\timport { flip } from 'svelte/animate';\n\timport { dndzone } from 'svelte-dnd-action';\n\timport Svg from './Svg.svelte'\n\timport Paragraph from './Paragraph.svelte'\n\timport Image from './Image.svelte'\n\timport Video from './Video.svelte'\n\timport Code from './Code.svelte'\n\timport Section from './Section.svelte'\n\timport Options from './Options.svelte'\n\timport Style from './Style.svelte'\n\timport Connection from './Connection.svelte'\n\timport Authorization from './Authorization.svelte'\n\timport Svega from './Svega.svelte'\n\timport Data from './Data.svelte'\n\timport CouchDB from './CouchDB.svelte'\n\timport Disqus from './Disqus.svelte'\nimport { check_outros } from 'svelte/internal';\n\texport let nodes\n\texport let opt\n\texport let id\n\texport let depth\n\texport let width\n\texport let view={}\n\texport let addDepth=0\n\tlet key\n\n\tlet exempt=[\"Header\"]\n\n\tlet comp={\tParagraph:Paragraph, \n\t\t\t\tImage:Image,\n\t\t\t\tVideo:Video,\n\t\t\t\tCode:Code,\n\t\t\t\tSvg:Svg,\n\t\t\t\tSection:Section,\n\t\t\t\tOptions:Options,\n\t\t\t\tStyle:Style,\n\t\t\t\tConnection:Connection,\n\t\t\t\tAuthorization:Authorization,\n\t\t\t\tSvega:Svega,\n\t\t\t\tData:Data}\n\n\tconst flipDurationMs = 400;\n\t\n\tfunction handleDndConsider(e) {\n\t\tnodes[id].links = e.detail.items\n\t}\n\t\n\tfunction handleDndFinalize(e) {\n\t\tconsole.log(e)\n\t\tnodes[id].links = e.detail.items;\n\t\tpost(id)\n\t\tconsole.log('update node with links')\n\t}\n\tfunction uuid() {\n\treturn ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {\n\t\treturn (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);\n\t}).replace(/-/g, \"\");\n};\n\t\nasync function post(id) {\n\ttry {\n\t\tnodes[id].updated= new Date()\n\t\tconst options={\n\t\t\tmethod: 'put',\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"Accept\": \"application/json\",\n\t\t\t\t\"authorization\": 'Basic ' + btoa(opt.user + ':' + opt.pwd)\n\t\t\t},\n\t\t\tbody: JSON.stringify(nodes[id])\n\t\t}\n\n\t\tconst response=await fetch(opt.url+id, options)\n\t\tconst data= await response.json()\n\t\tnodes[id]._rev=data.rev\n\t\tconsole.log(options)\n\t\tconsole.log(data)\n\t}\n\tcatch (err) {console.log(err)}\n}\n\nfunction docUpdates(doc){\n\tif (doc.content.context==\"\"){doc.content.context=\"context\"}\n\tif (doc.content.infer==\"\"){doc.content.infer=\"infer\"}\n\treturn doc\n}\n\nasync function get(id){\n\t\n\ttry {\n\t\tif (Array.isArray(id))\n\t\t\t{\n\t\t\t\tconst options={\n    \t\t\tmethod: 'post',\n    \t\t\theaders: {\n      \t\t\t\"Content-Type\": \"application/json\"\n    \t\t\t},\n    \t\t\tbody: JSON.stringify({keys:id.map(el=>el.id), include_docs:true})\n\t\t\t  }\n\t\t\t\tconst response=await fetch(opt.url+'_all_docs', options)\n\t\t\t\tconst data= await response.json()\n\t\t\t\tconst add=[]\n\t\t\t\tdata.rows.forEach(el => {\n\t\t\t\t\tnodes[el.id]=docUpdates(el.doc); \n\t\t\t\t\tif (nodes[el.id].hasOwnProperty('links'))\n\t\t\t\t\t\t{if (nodes[el.id].links.length>0)\t\n\t\t\t\t\t\t\t{nodes[el.id].links.forEach(link=>add.push(link))}; };\n\t\t\t\t\t\t});\n\t\t\t\t if (add.length>0){await get(add)};// not sure how add coulc be empty as links.length has to be >0\n\t\t\t\treturn data\n\t\t\t}\n\t\telse {\n\t\t\tif (nodes[id]) //don't fetch it twice\n\t\t\t\t{ //IF nodes[id].links and these not in keys(nodes) then bulk-fetch these\n\t\t\t\t\treturn nodes[id]}\n\t\t\telse \n\t\t\t\t{\n\t\t\t\tconst response=await fetch(opt.url+id)\n\t\t\t\t//console.log(response)\n\t\t\t\tconst data= await response.json()\n\n\t\t\t\tnodes[id]=docUpdates(data);\n\t\t\t\t\n\t\t\t\tif (data.hasOwnProperty('links')) {await get(data.links)}\n\t\t\t\treturn nodes[id]\n\t\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t\n\tconsole.log(id)\n\t\tconsole.log(err)\n\t\treturn err\n\t}\t\n}\n\nfunction newNode(type){\n\t\tconst base={\n\t\t\t\t_id:uuid(),\n\t\t\t\tinfo: {\n\t\t\t\tcomments: false,\n\t\t\t\tupdated: new Date(),\n\t\t\t\tcreated: new Date(),\n\t\t\t\ttags: [],\n\t\t\t\tlinked: [],\n\t\t\t\ttodo: [],\n\t\t\t\tcontribution: [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"5fb3c55dbdd14e87821828892133904a\": [\n\t\t\t\t\t\t\"created\",\n\t\t\t\t\t\t\"author\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t\t},\n\t\t\t\tcontent: {\n\t\t\t\t\tcontext: \"context\",\n\t\t\t\t\tinfer: \"infer\",\n\t\t\t\t\ttext: \"New text\"\n\t\t\t\t},\n\t\t\t\tprivate: true,\n\t\t\t\tlive: true,\n\t\t\t\ttype: \"Paragraph\"\n\t\t\t}\n\t\tif (type=='Paragraph')\n\t\t{\n\t\t\treturn base\n\t\t}\n\t\tif (type=='Section')\n\t\t{\n\t\t\tbase.links=[]\n\t\t\tbase.type=\"Section\"\n\t\t\tbase.content.title=\"New Section\"\n\t\t\tdelete base.content.text\n\t\t\treturn base\n\t\t}\n\t\tif (type=='Image')\n\t\t{\n\t\t\tbase.content.src=\"url\"\n\t\t\tbase.type=\"Image\"\n\t\t\treturn base\n\t\t}\t\t\n\n\t}\n\nfunction addRemove(event,i,id,parent){\n\tconst y=event.offsetY/event.currentTarget.getBoundingClientRect().height\n\tconsole.log(y);\n\tconsole.log(i)\n\tconsole.log('node: '+id);\n\tconsole.log('parent: '+parent);\n\tconsole.log(nodes[id].links)\n\tif (opt.addParagraph){\n\t\tconst thisID=uuid()\n\t\tnodes[thisID]=newNode('Paragraph')\n\t\tconsole.log(nodes[thisID])\n\t\tpost(thisID)\n\t\t// Note make it dependent on where one clicks!!\n\t\tnodes[parent].links.splice(i+1,0,{id:thisID,view:'inline'})\n\t\tpost(parent) //NOTE: try to make  bulk-post!\n\t\topt.addParagraph=false\n\t}\n\telse if (opt.addSection){\n\t\tconst thisID=uuid()\n\t\tnodes[thisID]=newNode('Section')\n\t\tconsole.log(nodes[thisID])\n\t\tpost(thisID)\n\t\t// Note make it dependent on where one clicks!!\n\t\tnodes[parent].links.splice(i+1,0,{id:thisID,view:'inline',addDepth:1})\n\t\tpost(parent) //NOTE: try to make  bulk-post!\n\t\topt.addSection=false\n\t}\n\telse if (opt.addImage){\n\t\tconst thisID=uuid()\n\t\tnodes[thisID]=newNode('Image')\n\t\tconsole.log(nodes[thisID])\n\t\tpost(thisID)\n\t\t// Note make it dependent on where one clicks!!\n\t\tnodes[parent].links.splice(i+1,0,{id:thisID,view:'inline'})\n\t\tpost(parent) //NOTE: try to make  bulk-post!\n\t\topt.addImage=false\n\t}\n\telse if (opt.remove){\n\t\tnodes[parent].links.splice(i,1)\n\t\tpost(parent) //NOTE: try to make  bulk-post!\n\t\topt.remove=false\n\t}\n\t\n}\n\nlet timer;\n\nfunction debounce() {\n    console.log('start debounce');\n\t\tclearTimeout(timer);\n\t\ttimer = setTimeout(() => {post(id);}, 1500);\n  }\n\n//$: if (view) {if (view.addDepth){addDepth=view.addDepth}}\n\n//$: {console.log(addDepth)}\n</script>\n{#await get(id)}\n\tloading\n\t\n{:then go}\n\t{#if opt.showContextInfer>0}\n\t<!-- MAKE A RND NOTE EDIT FUNCTION, SORTED BY DATE??-->\n\t\t<div>context: <span style=\"color:olive\" on:keyup={()=>debounce()} contenteditable=true  bind:innerHTML={nodes[id].content.context}></span></div>\n\t{/if}\n\t{#if opt.showContextInfer<2}\n\t<svelte:component this={comp[nodes[id].type]} bind:nodes={nodes} bind:opt={opt} id={id} width={width} depth={depth} view={view} bind:addDepth={addDepth}/>\n\t{/if}\n\t{#if opt.showContextInfer>0}\n\t\t<div style=\"margin-bottom:0.3em\">infer: <span style=\"color:orange\" on:keyup={()=>debounce()} contenteditable=true  bind:innerHTML={nodes[id].content.infer}> </span>  </div>\n\t{/if}\n\n\t{#if (nodes[id].links && depth<=opt.depth+addDepth+(view.hasOwnProperty(\"addDepth\")?view.addDepth:0))}\n\t\t<section use:dndzone={{items:nodes[id].links, flipDurationMs,type:'dnd',dragDisabled:opt.dragDisabled}}\n\t\t\t\t\ton:consider={handleDndConsider} \n\t\t\t\t\ton:finalize={handleDndFinalize}>\n\t\t\t\t{#each nodes[id].links as link,i (link.id)}\n\t\t\t\t\t\t<div animate:flip=\"{{duration: flipDurationMs}}\" class=\"item\" on:click={(event)=>addRemove(event,i,link.id,id)}>\n\t\t\t\t\t\t\t<svelte:self bind:nodes={nodes} bind:opt={opt} id={link.id} width={width} depth={depth+1} addDepth={addDepth} view={link}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t{/each}\n\t\t</section>\n\t{/if}\n\t{#if depth==1}\n\t{#if nodes[id].info.comments}\n\t\t<Disqus id={id} title={nodes[id].content.title}/>\n\t{/if}\n\t{/if}\n{:catch error}\n\t<p style=\"color: red\">{error.message}</p>\n{/await}\n\n<style>\n\tsection {\n\t\twidth: auto;\n\t\tmax-width: 800px;\n\t\tmin-height: 40px;\n\t\tborder: 0px solid black;\n\t\tpadding: 0;\n\t\tmargin: 0;\n        /* this will allow the dragged element to scroll the list */\n\t\toverflow-y: auto ;\n\t\theight: auto;\n\t\tbackground-color: white; /* rgba(100, 100, 100, 0.05);*/ \n\n\t}\n\tdiv {\n\t\twidth: 100%;\n\t\tpadding:0;\n\t\tpadding-bottom: 0.3em;\n\t\tborder: 0px solid blue;\n\t\tmargin: 0;\n\t}\n\t.item {\n\t\tbackground-color: white /*rgba(00, 100, 100, 0.05);*/\n\t}\n\n</style>",
    "<script>\nexport let opt\nexport let nodes\nexport let width\nexport let depth\nexport let id\nexport let view\nexport let addDepth\n</script>\n\n{#if view.view!=\"header\"}\n    <img src={nodes[id].content.src} alt=\"\"/>\n    <div contenteditable={opt.edit} >Fig. {(nodes[id].content.caption) ? nodes[id].content.caption : nodes[id].content.text}</div>\n{/if}\n<style>\nimg {\nwidth:100%\n}\ndiv {\n  font-family:    Georgia, 'Times New Roman', Times, serif, serif;\n  color: \"darkgray\";\n  margin:0;\n  padding-left: 0.8em;\n  padding-right: 0.8em;\n  padding-bottom: 0.8em\n}\n</style>",
    "<script>\n  export let opt\n  export let width\n  export let nodes\n  export let id\n  export let depth\n  export let view\n  export let addDepth\n\n  async function post(id) {\n    try {\n      const options={\n        method: 'put',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\",\n          \"authorization\": 'Basic ' + btoa(opt.user + ':' + opt.pwd)\n        },\n        body: JSON.stringify(nodes[id])\n      }\n      const response=await fetch(opt.url+id, options)\n      const data= await response.json()\n      nodes[id]._rev=data.rev\n      console.log(options)\n      console.log(data)\n    }\n    catch (err) {console.log(err)}\n}\n  \n  let timer;\n\n\tfunction debounce() {\n    console.log('start debounce');\n\t\tclearTimeout(timer);\n\t\ttimer = setTimeout(() => {post(id);}, 1500);\n  }\n  \n</script>\n\n{#if opt.edit}\n  <div on:keyup={()=>debounce()} contenteditable=true bind:innerHTML={nodes[id].content.text}></div>\n{:else}\n  <div on:keyup={()=>debounce()} contenteditable=false  bind:innerHTML={nodes[id].content.text}></div>  \n{/if}\n<style>\ndiv {\n  margin:0;\n  padding-left: 0.4em;\n  padding-right: 0.4em;\n  font-size: 18px;\n  line-height: 1.44444;\n  font-family: Georgia,Times New Roman,Times,serif; \n}\n</style>\n\n",
    "<script>\nimport Image from './Image.svelte'\nimport Svg from './Svg.svelte'\nexport let opt\nexport let nodes\nexport let id\nexport let width\nexport let depth\nexport let view\nexport let addDepth\nlet backgroundImageID\n\nif (nodes[id].links.length>0){\n  if (nodes[id].links.filter(x=>x.view=='header')[0])\n    {backgroundImageID=nodes[id].links.filter(x=>x.view=='header')[0].id}\n}\n\nasync function post(id) {\n    try {\n      const options={\n        method: 'put',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\",\n          \"authorization\": 'Basic ' + btoa(opt.user + ':' + opt.pwd)\n        },\n        body: JSON.stringify(nodes[id])\n      }\n      const response=await fetch(opt.url+id, options)\n      const data= await response.json()\n      nodes[id]._rev=data.rev\n      console.log(options)\n      console.log(data)\n    }\n    catch (err) {console.log(err)}\n}\n\nlet timer;\nfunction debounce() {\n    console.log('start debounce');\n\t\tclearTimeout(timer);\n\t\ttimer = setTimeout(() => {post(id);}, 1500);\n  }\n\nfunction addToHistory(){\n  if (id!=opt.base && (view.view!=\"thumb\" || opt.edit)){ // avoid adding when already base\n  opt.history.push(opt.base); \n  opt.base=id}\n}\n\n</script>\n{#if nodes[backgroundImageID]}\n    <section class=\"masthead\" role=\"img\" aria-label=\"Image Description\" style=\"background-image:url({nodes[backgroundImageID].content.src})\">\n      \n      {#if opt.edit}\n      <h1  on:click={()=>addToHistory()} on:keyup={()=>debounce()} contenteditable=true bind:innerHTML={nodes[id].content.title}/>\n    {:else}\n      <h1  on:click={()=>addToHistory()} style=\"color:{view.view==\"thumb\" ? \"lightgray\" : \"white\"};\">{@html nodes[id].content.title} </h1>\n    {/if}\n  </section>\n  {:else}\n  {#if opt.edit}\n  \n  <div class=\"section\" style=\"padding-bottom:{Math.max(0.0,0.9-(depth-2)*0.6)}em; padding-top:{Math.max(0.0,1.5-(depth-2))}em \">\n    <h2  on:click={()=>addToHistory()}  on:keyup={()=>debounce()} contenteditable=true bind:innerHTML={nodes[id].content.title} style=\"font-size:{1.0+0.5/(depth-1)}em\" /> \n    <span  on:click|stopPropagation={()=>{ addDepth++}}>\n      <Svg name=\"Circle\" size=\"1.2em\" fill=\"#ddd\"/>\n    </span>\n  </div>\n{:else}\n<!-- REMEMBER TO MAKE ADDDEPTH TOGGLE INSTEAD!-->\n<div class=\"section\" style=\"padding-bottom:{Math.max(0.0,1.5-(depth-2)*1.3)}em; padding-top:{Math.max(0.0,1.5-(depth-2))}em \">\n<h2  on:click={()=>addToHistory()}  on:keyup={()=>debounce()} style=\"font-size:{1.0+0.5/(depth-1)}em; color:{(depth<=2)?\"black\":\"gray\"}\">{@html nodes[id].content.title}</h2><span  on:click|stopPropagation={()=>{ addDepth++}}><Svg name=\"Circle\" size=\"1.2em\" fill=\"#ddd\"/> </span></div>\n{/if}\n    \n  {/if}\n\n\n<style>\n\t.masthead {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  text-align: center;\n  width: 100%;\n  height: 60vw; /* if you don't want it to take up the full screen, reduce this number */\n  max-height: 400px;\n  overflow: hidden;\n  background-size: cover !important;\n  background:  no-repeat center center scroll;\n}\n\nh1 {\n  font-style: normal;\n  font-weight: bold;\n  color: #eee;\n  font-size: min(8vmin,30px);\n  letter-spacing: 0.03em;\n  line-height: 1;\n  text-shadow: 1px 2px 4px rgba(0, 0, 0, 0.8);\n  margin-bottom: -90px;/* 40 to be in middle */\n}\n\nh2 {\n  display: inline\n}\n.section{\n  margin:0;\n  padding:0;\n}\n</style>\n",
    "<script>\n\t\texport let nodes\n\t\texport let id\n\t\texport let opt\n\t\texport let width\n\t\texport let depth\n        export let view\n        export let addDepth\n$: opt\n$: width\n</script>\n\n<div class=\"container\">\n<iframe class=\"video\" title=\"title\" src={nodes[id].content.src} frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n<style>\n.container {\n    position: relative;\n    width: 100%;\n    height: 0;\n    padding-bottom: 56.25%;\n}\n.video {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>"
  ],
  "names": [],
  "mappings": "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"
}